/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.wood.bulkeditor.ui;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openide.util.NbBundle;
import org.openide.windows.IOContainer.CallBacks;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.Exceptions;
import org.openide.windows.IOContainer;
import org.openide.windows.IOProvider;
import org.openide.windows.InputOutput;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.wood.bulkeditor.ui//BulkEditor//EN",
        autostore = false)
public final class BulkEditor extends TopComponent implements ChangeListener {

    private static BulkEditor instance;
    /**
     * path to the icon used by the component and its open action
     */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "BulkEditor";
    private InputOutput inputOutput;
    private BulkEditorSupport support;
    private DefaultComboBoxModel comboModel;

    public BulkEditor() {
        initComponents();
        setName(NbBundle.getMessage(BulkEditor.class, "CTL_BulkEditor"));
        setToolTipText(NbBundle.getMessage(BulkEditor.class, "HINT_BulkEditor"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        IOContainer container = IOContainer.create(new EmbeddedProvider());
        support = new BulkEditorSupport();
        support.addChangeListener(this);
        List<Action> actions = new ArrayList<Action>();
        actions.add(new ClearAction());
        actions.add(new DiffAction());
        inputOutput = IOProvider.getDefault().getIO("Bulk Editor", actions.toArray(new Action[0]), container);
        comboModel = new DefaultComboBoxModel();
        pathCombo.setModel(comboModel);
    }

    public void stateChanged(ChangeEvent e) {
        support.refreshLinks(inputOutput);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pathLabel = new javax.swing.JLabel();
        pathCombo = new javax.swing.JComboBox();
        searchButton = new javax.swing.JButton();
        outputPanel = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();

        org.openide.awt.Mnemonics.setLocalizedText(pathLabel, org.openide.util.NbBundle.getMessage(BulkEditor.class, "BulkEditor.pathLabel.text")); // NOI18N

        pathCombo.setEditable(true);

        org.openide.awt.Mnemonics.setLocalizedText(searchButton, org.openide.util.NbBundle.getMessage(BulkEditor.class, "BulkEditor.searchButton.text")); // NOI18N
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        outputPanel.setLayout(new java.awt.BorderLayout());

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pathCombo, 0, 257, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton)
                .addContainerGap())
            .addComponent(outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(buttonPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathLabel)
                    .addComponent(pathCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String relativePath = (String) pathCombo.getSelectedItem();
        try {
            inputOutput.getOut().reset();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        support.runSearch(relativePath, inputOutput);
        if (comboModel.getIndexOf(relativePath) == -1) {
            comboModel.addElement(relativePath);
        }
    }//GEN-LAST:event_searchButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JComboBox pathCombo;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files
     * only, i.e. deserialization routines; otherwise you could get a
     * non-deserialized instance. To obtain the singleton instance, use
     * {@link #findInstance}.
     */
    public static synchronized BulkEditor getDefault() {
        if (instance == null) {
            instance = new BulkEditor();
        }
        return instance;
    }

    /**
     * Obtain the BulkEditor instance. Never call {@link #getDefault} directly!
     */
    public static synchronized BulkEditor findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(BulkEditor.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof BulkEditor) {
            return (BulkEditor) win;
        }
        Logger.getLogger(BulkEditor.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
        int size = comboModel.getSize();
        p.setProperty("numItems", Integer.toString(size));
        for (int i = 0; i < size; i++) {
            p.setProperty("item" + i, (String) comboModel.getElementAt(i));
        }
        p.setProperty("selectedIndex", Integer.toString(pathCombo.getSelectedIndex()));
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
        String sizeStr = p.getProperty("numItems");
        if (sizeStr == null) {
            return;
        }
        int size = Integer.parseInt(sizeStr);
        for (int i = 0; i < size; i++) {
            String path = p.getProperty("item" + i);
            comboModel.addElement(path);
        }
        String selIndexStr = p.getProperty("selectedIndex");
        if (selIndexStr != null) {
            pathCombo.setSelectedIndex(Integer.parseInt(selIndexStr));
        }
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    class ClearAction extends AbstractAction {

        public ClearAction() {
            super("Clear");
        }

        public void actionPerformed(ActionEvent e) {
            try {
                inputOutput.getOut().reset();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }

    class DiffAction extends AbstractAction {

        public DiffAction() {
            super("Diff");
        }

        public void actionPerformed(ActionEvent e) {
            support.setShowDiff(true);
        }
    }

    class EmbeddedProvider implements IOContainer.Provider {

        public void open() {
        }

        public void requestActive() {
        }

        public void requestVisible() {
        }

        public boolean isActivated() {
            return true;
        }

        public void add(JComponent jc, CallBacks cb) {
            outputPanel.add(jc, BorderLayout.CENTER);
        }

        public void remove(JComponent jc) {
        }

        public void select(JComponent jc) {
        }

        public JComponent getSelected() {
            return BulkEditor.this;
        }

        public void setTitle(JComponent jc, String string) {
        }

        public void setToolTipText(JComponent jc, String string) {
        }

        public void setIcon(JComponent jc, Icon icon) {
        }

        public void setToolbarActions(JComponent jc, Action[] actions) {
            System.out.println(jc);
            for (int i = 0; i < actions.length; i++) {
                Action action = actions[i];
                JButton button = new JButton(action);
                buttonPanel.add(button);
            }
        }

        public boolean isCloseable(JComponent jc) {
            return canClose();
        }
    }
}
